data(cickWeight)
data(chickWeight)
data(ChickWeight)
summary(ChickWeight)
View(ChickWeight)
View(ChickWeight)
boxplot(ChickWeight$weight~ChickWeight$Diet)
par(mfrow=c(2,2))
boxplot(ChickWeight$weight~ChickWeight$Diet)
boxplot(ChickWeight$weight = "weight" ~ChickWeight$Diet = "diet")
boxplot(ChickWeight$weight="weight" ~ChickWeight$Diet="diet")
boxplot(ChickWeight$weight~ ChickWeight$Diet)
boxplot(ChickWeight$weight~ ChickWeight$Diet)
boxplot(ChickWeight$weight~ ChickWeight$Diet)
boxplot(ChickWeight$weight~ ChickWeight$Diet)
View(ChickWeight)
View(ChickWeight)
d1 <-ChickWeight[ChickWeight$Diet == 1,]
d2 <-ChickWeight[ChickWeight$Diet == 2,]
d3 <-ChickWeight[ChickWeight$Diet == 3,]
d4 <-ChickWeight[ChickWeight$Diet == 4,]
View(d4)
View(d3)
View(d3)
data(Orange)
Orange
View(Orange)
chickweight<- table(ChickWeight$weight,ChickWeight$Diet)
chickweight<- table(ChickWeight$weight,ChickWeight$Diet)
barplot(morecounts, main="chich weight",xlab="diets")
barplot(morecounts, main="chich weight",xlab="diets",)
barplot(morecounts, main="chich weight",xlab="diets",col=c("darkblue","red"))
Wine_Data_Unclean <- read.csv("~/Wine_Data_Unclean.csv")
View(Wine_Data_Unclean)
View(Wine_Data_Unclean)
regex<- "\\w+"
delta <-"hello my friend"
d <-regexpr(delta,vegex)
d
regex<- "\\w+"
delta <-"hello my friend"
d <-regexpr(delta,vegex)
print(d)
regex<- "\\w+"
delta <-"hello my friend"
d <-regexpr(delta,vegex)
d <-regexpr(delta,vegax)
regmatches(Wine_Data_Unclean$variety_and_region,gregexpr("/",+Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region,gregexpr("\",+Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region,gregexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region,regexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region,regexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/",Wine_Data_Unclean$variety_and_region))
summary(ChickWeight)
summary(ChickWeight)
data(ChickWeight)
data(ChickWeight)
summary(ChickWeight)
data(ChickWeight)
data(ChickWeight)
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/ \\w+",Wine_Data_Unclean$variety_and_region))
View(Wine_Data_Unclean)
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w+",Wine_Data_Unclean$variety_and_region)
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w+",Wine_Data_Unclean$variety_and_region)
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w+",Wine_Data_Unclean$variety_and_region))
View(Wine_Data_Unclean)
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/\\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
str_extract_all(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region,samplify =TRUE))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
View(Wine_Data_Unclean)
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$X.1))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$X.1))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$X))
regmatches(Wine_Data_Unclean$X.1, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, gregexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/ \\w*",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/ \\w+",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/w+",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/ \\w+",Wine_Data_Unclean$variety_and_region))
regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
View(Wine_Data_Unclean)
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
view(first_new_col)
View(first_new_col)
regmatches(first_new_col, regexpr("/.+",first_new_col))
secound_new_col
first_new_col
Wine_Data_Unclean <- sub("/.+",replacement = " ",data = Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean <- sub("/.+",replacement = " ",data.Wine_Data_Unclean$variety_and_region)
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ "," ",first_new_col)
Wine_Data_Unclean$region <- first_new_col
View(Wine_Data_Unclean)
Wine_Data_Unclean$region <- fixers
secound_new_col <- regmatches(Wine_Data_Unclean$region, regexpr("/.+",Wine_Data_Unclean$region))
fixers2 <- sub("/ ","",secound_new_col)
Wine_Data_Unclean$region2 <- fixers2
fixer3 <- sib("/","",region)
fixer3 <- sub("/","",region)
fixer3 <- sub("/","",Wine_Data_Unclean$region)
fixer3
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
fixer3
Wine_Data_Unclean$variety_and_region <- fixer4
fixer3 <- sub("/.+","",Wine_Data_Unclean$region)
Wine_Data_Unclean$region <- fixer3
View(Wine_Data_Unclean)
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$region <- fixers
secound_new_col <- regmatches(Wine_Data_Unclean$region, regexpr("/.+",Wine_Data_Unclean$region))
fixers2 <- sub("/ ","",secound_new_col)
Wine_Data_Unclean$region2 <- fixers2
fixer3 <- sub("/","",Wine_Data_Unclean$region)
Wine_Data_Unclean$region <- fixer3
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$region <- fixers
Wine_Data_Unclean <- read.csv("C:/Users?Admin?Documents/Wine_Data_Unclean.csv",stringsAsFactors = FALSE)
Wine_Data_Unclean <- read.csv("C:/Users/Admin?Documents/Wine_Data_Unclean.csv",stringsAsFactors = FALSE)
Wine_Data_Unclean <- read.csv("C:/Users/Admin/Documents/Wine_Data_Unclean.csv",stringsAsFactors = FALSE)
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$region <- fixers
secound_new_col <- regmatches(Wine_Data_Unclean$region, regexpr("/.+",Wine_Data_Unclean$region))
fixers2 <- sub("/ ","",secound_new_col)
Wine_Data_Unclean$region2 <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean$region)
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean$variety_and_region <- fixer4
?name
colnames(Wine_Data_Unclean)[10] <- "variety"
Wine_Data_Unclean <- read.csv("C:/Users/Admin/Documents/Wine_Data_Unclean.csv",stringsAsFactors = FALSE)
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$secound_col <- fixers
secound_col <- regmatches(Wine_Data_Unclean$secound_col, regexpr("/.+",Wine_Data_Unclean$region))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean$third_col <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean$region)
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean$variety_and_region <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$secound_col <- fixers
secound_col <- regmatches(Wine_Data_Unclean$secound_col, regexpr("/.+",Wine_Data_Unclean$secound_col))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean$third_col <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean$region)
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean$variety_and_region <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$secound_col <- fixers
secound_col <- regmatches(Wine_Data_Unclean$secound_col, regexpr("/.+",Wine_Data_Unclean$secound_col))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean$third_col <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean$secound_col)
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean$variety_and_region <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
first_col <- "variety"
secound_col <- "region"
third_col <- "region2"
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime(first_col,secound_col,third_col)
first_col <- "variety"
secound_col <- "region"
third_col <- "region2"
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean$secound_col <- fixers
secound_col <- regmatches(Wine_Data_Unclean$secound_col, regexpr("/.+",Wine_Data_Unclean$secound_col))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean$third_col <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean$secound_col)
Wine_Data_Unclean$region <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean$variety_and_region <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean[secound_col] <- fixers
secound_col <- regmatches(Wine_Data_Unclean$secound_col, regexpr("/.+",Wine_Data_Unclean[secound_col]))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean[third_col] <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean[secound_col])
Wine_Data_Unclean[secound_col] <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean[variety_and_region] <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean[secound_col] <- fixers
secound_col <- regmatches(Wine_Data_Unclean[secound_col], regexpr("/.+",Wine_Data_Unclean[secound_col]))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean[third_col] <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean[secound_col])
Wine_Data_Unclean[secound_col] <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean[variety_and_region] <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
cleanerPrime <- function(first_col,secound_col,third_col){
first_new_col <- regmatches(Wine_Data_Unclean$variety_and_region, regexpr("/.+",Wine_Data_Unclean$variety_and_region))
fixers <- sub("/ ","",first_new_col)
Wine_Data_Unclean[secound_col] <- fixers
secound_col <- regmatches(Wine_Data_Unclean[secound_col], regexpr("/.+",Wine_Data_Unclean[secound_col]))
fixers2 <- sub("/ ","",secound_col)
Wine_Data_Unclean[third_col] <- fixers2
fixer3 <- sub("/.+","",Wine_Data_Unclean[secound_col])
Wine_Data_Unclean[secound_col] <- fixer3
fixer4 <-sub("/.+","",Wine_Data_Unclean$variety_and_region)
Wine_Data_Unclean[variety_and_region] <- fixer4
colnames(Wine_Data_Unclean)[10] <- first_col
}
cleanerPrime(first_col,secound_col,third_col)
??e1071
##comput svm confusion matrix
table(pred = svm.pred, true = testset[,10])
install.packages("e1071")
install.packages("mlbench")
RawData <- read.csv("C:/Users/Admin/Documents/glass.csv",header = FALSE)
library(e1071)
library(rpart)
data(Glass,package="mlbench")
##Data_NoID <- Glass[,-1]
index <- 1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
##svm
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testset[,-10])
##rpart
rpart.model <- rpart(Type ~ ., data = trainset)
rpart.pred <- predict(rpart.model, testset[,-10], type = "class")
##comput svm confusion matrix
table(pred = svm.pred, true = testset[,10])
View(svm.model)
??naiveBayes
libery(naiveBayes)
library(naiveBayes)
function (x, ...)
UseMethod("naiveBayes")
setwd("C:/Users/Admin/Documents/house_price")
TestData <- read.csv("test.csv")
TestData <- read.csv("test.csv")
View(TestData)
TestData <- read.csv("train.csv")
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )
install.packages("ggplot2")
library(ggplot2)
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )
TestData <- substring("A","1",MSZoning)
TestData <- substring("A","1",TestData$MSZoning)
TestData <- read.csv("train.csv")
TestData$MSZoning <- substring("A","1",TestData$MSZoning)
View(TestData)
TestData$MSZoning <- substring("A","1",TestData$MSZoning)
TestData <- read.csv("train.csv")
View(TestData)
TestData$MSZoning <- sub("A","1",TestData$MSZoning)
View(TestData)
TestData$MSZoning <- sub("C","2",TestData$MSZoning)
TestData$MSZoning <- sub("FV","3",TestData$MSZoning)
TestData$MSZoning <- sub("I","4",TestData$MSZoning)
TestData$MSZoning <- sub("RH","5",TestData$MSZoning)
TestData$MSZoning <- sub("RL","6",TestData$MSZoning)
TestData$MSZoning <- sub("RM","7",TestData$MSZoning)
View(TestData)
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData ) #no concluion reached from inital summary
TestData$LotFrontage <- sub(NA,0,TestData$LotFrontage)
View(TestData)
TestData <- read.csv("train.csv")
TestData$LotFrontage[is.na(TestData$LotFrontage)] <- 30
View(TestData)
TestData <- read.csv("train.csv")
TestData$LotFrontage[is.na(TestData$LotFrontage)] <- 0
View(TestData)
qplot(TestData$LotFrontage,TestData$SalePrice, data= TestData)
qplot(TestData$LotFrontage,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)#no easly desernable coralation come back and check if it effects accuracy
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$LotArea,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$Street,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
TestData$Alley[is.na(TestData$Alley)] <- 1
View(TestData)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$LotFrontage[is.na(TestData$LotFrontage)] <- 0
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley[is.NA(TestData$Alley)] <- 0
View(TestData)
TestData <- read.csv("train.csv")
TestData$Alley[is.na(TestData$Alley)] <- 0
summary(TestData)
str(TestData)
TestData$Alley <- sub("Grvl",2,Alley)
TestData$Alley <- sub("Grvl",2,TestData$Alley)
TestData$Alley <- sub("pave",3,TestData$Alley)
TestData$Alley <-as.Int(TestData$Alley)
TestData$Alley <-as.int(TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
View(TestData)
TestData$Alley <-as.factor(TestData$Alley)
qplot(TestData$Street,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$LotShape,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$LandContour,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
TestData$LandContour <- sub("Bnk",2,TestData$Alley)
TestData$LandContour <- sub("HLS",3,TestData$Alley)
TestData$LandContour <- sub("Low",4,TestData$Alley)
TestData$LandContour <- sub("Lv1",1,TestData$Alley)
View(TestData)
TestData <- read.csv("train.csv")
TestData$LandContour <- sub("Lv1",1,TestData$Alley)
TestData$LandContour <- sub("Bnk",2,TestData$Alley)
TestData$LandContour <- sub("HLS",3,TestData$Alley)
TestData$LandContour <- sub("Low",4,TestData$Alley)
View(TestData)
TestData <- read.csv("train.csv")
TestData$LandContour <- sub("Lv1",1,TestData$LandContour)
TestData$LandContour <- sub("Bnk",2,TestData$LandContour)
TestData$LandContour <- sub("HLS",3,TestData$LandContour)
TestData$LandContour <- sub("Low",4,TestData$LandContour)
View(TestData)
TestData$LandContour <- sub("Lvl",1,TestData$LandContour)
View(TestData)
qplot(TestData$LandContour,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)
qplot(TestData$Utilities,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LotConfig,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$BldgType,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$HouseStyle,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line however could be a usefull factor to apply
qplot(TestData$LotConfig,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable/ majority of data in the first column
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$Condition2,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$BldgType,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line however could be a usefull factor to apply
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$HouseStyle,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line however could be a usefull factor to apply
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable/ majority of data in the first column
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$Street,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)# this colum is not very usefull due to only having a small number of Grvl instances
TestData$LandContour <- sub("Lvl",1,TestData$LandContour)
TestData$LandContour <- sub("Bnk",2,TestData$LandContour)
TestData$LandContour <- sub("HLS",3,TestData$LandContour)
TestData$LandContour <- sub("Low",4,TestData$LandContour)
qplot(TestData$LandContour,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$Utilities,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #not enogh data to draw a conclusion from
qplot(TestData$LotConfig,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable/ majority of data in the first column/however could be potentaly usfull
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$MSSubClass, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #no concluion reached from inital summary
qplot(TestData$MSZoning, TestData$SalePrice, data= TestData )+geom_smooth(method = 'lm',formula = y~x) #distict groupings that could help with decison trees
qplot(TestData$LotFrontage,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)#no easly desernable coralation come back and check if it effects accuracy
qplot(TestData$LotArea,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)#majority of data in the lower feald however a regression line can be seen
qplot(TestData$Street,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x)# this colum is not very usefull due to only having a small number of Grvl instances
TestData$Alley <- sub("Grvl",2,TestData$Alley)
TestData$Alley <- sub("pave",3,TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley <-as.factor(TestData$Alley)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
TestData$Alley <- sub("Pave",3,TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley <-as.factor(TestData$Alley)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
TestData <- read.csv("train.csv")
TestData$Alley <- sub("Grvl",2,TestData$Alley)
TestData$Alley <- sub("Pave",3,TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley <-as.factor(TestData$Alley)
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LotShape,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regresssion avalable
TestData$LandContour <- sub("Lvl",1,TestData$LandContour)
TestData$LandContour <- sub("Bnk",2,TestData$LandContour)
TestData$LandContour <- sub("HLS",3,TestData$LandContour)
TestData$LandContour <- sub("Low",4,TestData$LandContour)
qplot(TestData$LandContour,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$Utilities,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #not enogh data to draw a conclusion from
qplot(TestData$LotConfig,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
qplot(TestData$LandSlope,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable/ majority of data in the first column/however could be potentaly usfull
qplot(TestData$Neighborhood,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #possibly important however to little corisponding data
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$Condition2,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$Condition1,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$Condition2,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #to difficult to draw a conclusion from
qplot(TestData$BldgType,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line however could be a usefull factor to apply
qplot(TestData$HouseStyle,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression line
qplot(TestData$Alley,TestData$SalePrice, data= TestData)+geom_smooth(method = 'lm',formula = y~x) #no regression avalable
TestData$Alley <- sub("Grvl",2,TestData$Alley)
TestData$Alley <- sub("Pave",3,TestData$Alley)
TestData$Alley <-as.integer(TestData$Alley)
TestData$Alley[is.na(TestData$Alley)] <- 0
TestData$Alley <-as.factor(TestData$Alley)
View(TestData)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/Admin/Documents/house_price")
cleaneddata <- read.csv("train.csv")
cleaneddata$Id<-NULL
cleaneddata$LotFrontage<-NULL
cleaneddata$LotArea<-NULL
cleaneddata$Street<-NULL
cleaneddata$LotShape<-NULL
cleaneddata$LandContour<-NULL
cleaneddata$Utilities<-NULL
cleaneddata$LotConfig<-NULL
cleaneddata$LandSlope<-NULL
cleaneddata$Condition1<-NULL
cleaneddata$Condition2<-NULL
cleaneddata$HouseStyle<-NULL
cleaneddata$OverallCond<-NULL
cleaneddata$YearBuilt<-NULL
cleaneddata$YearRemodAdd<-NULL
cleaneddata$RoofStyle<-NULL
cleaneddata$RoofMatl<-NULL
cleaneddata$Exterior1st<-NULL
cleaneddata$Exterior2nd<-NULL
cleaneddata$MasVnrType<-NULL
cleaneddata$MasVnrArea<-NULL
cleaneddata$ExterQual<-NULL
cleaneddata$ExterCond<-NULL
cleaneddata$RoofMatl<-NULL
cleaneddata$BsmtCond<-NULL
cleaneddata$BsmtExposure<-NULL
cleaneddata$RoofMatl<-NULL
cleaneddata$BsmtFinSF1<-NULL
cleaneddata$BsmtFinSF2<-NULL
cleaneddata$BsmtFinType2<-NULL
cleaneddata$BsmtUnfSF<-NULL
cleaneddata$TotalBsmtSF<-NULL
cleaneddata$LowQualFinSF<-NULL
cleaneddata$RoofMatl<-NULL
cleaneddata$BsmtFullBath<-NULL
cleaneddata$BsmtHalfBath<-NULL
cleaneddata$HalfBath<-NULL
cleaneddata$BedroomAbvGr<-NULL
cleaneddata$KitchenAbvGr<-NULL
cleaneddata$Functional<-NULL
cleaneddata$FireplaceQu<-NULL
cleaneddata$GarageType<-NULL
cleaneddata$GarageArea<-NULL
cleaneddata$GarageQual<-NULL
cleaneddata$GarageCond<-NULL
cleaneddata$WoodDeckSF<-NULL
cleaneddata$OpenPorchSF<-NULL
cleaneddata$EnclosedPorch<-NULL
cleaneddata$X3SsnPorch<-NULL
cleaneddata$ScreenPorch<-NULL
cleaneddata$PoolArea<-NULL
cleaneddata$PoolQC<-NULL
cleaneddata$Fence<-NULL
cleaneddata$MiscFeature<-NULL
cleaneddata$MiscVal<-NULL
cleaneddata$MoSold<-NULL
cleaneddata$YrSold<-NULL
cleaneddata$SaleType<-NULL
cleaneddata$Alley<-sub("Grvl",2,modifiedtraindata$Alley)
cleaneddata$Alley<-sub("Pave",3,modifiedtraindata$Alley)
